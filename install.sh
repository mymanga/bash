#!/bin/bash

# Nginx Installation

# Step 1: Update the system
sudo apt update

# Step 2: Install Nginx
sudo apt install -y nginx

# Adjusting the firewall
sudo ufw allow 'Nginx Full'

# Step 3: Configure Nginx
sudo bash -c "cat > /etc/nginx/sites-available/default << EOL
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html/public;

	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#try_files $uri $uri/ =404;
		 try_files $uri $uri/ /index.php?$query_string;
	}

	# pass PHP scripts to FastCGI server
	#
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
		fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}
EOL"

# Step 4: Test Nginx
sudo systemctl restart nginx

# Install PHP

# Step 1: Update system
sudo apt update

# Step 2: Install the software-properties-common package
sudo apt install -y software-properties-common

# Step 3: Add the ondrej/php PPA repository, which provides PHP 7.4 packages
sudo add-apt-repository ppa:ondrej/php
sudo apt update

# Step 4: Install PHP 7.4 and PHP-FPM
sudo apt install -y php7.4 php7.4-fpm

# Step 5: Install additional PHP extensions as needed
sudo apt install -y php7.4-mysql php7.4-xml php7.4-gd

# Step 6: Start and enable PHP-FPM
sudo systemctl start php7.4-fpm
sudo systemctl enable php7.4-fpm

# Git clone laravel app

# Set the remote repository URL
REPO_URL="https://github.com/simpleisp/radius.git"

# Set the path to the local Laravel application directory
LOCAL_PATH="/var/www/html"

# Set the branch or tag to checkout
BRANCH="main"

# Pull the latest changes from the remote repository
git -C "$LOCAL_PATH" pull origin "$BRANCH"

# If the local Laravel application directory does not exist, clone the repository
if [ ! -d "$LOCAL_PATH" ]; then
    git clone --branch "$BRANCH" "$REPO_URL" "$LOCAL_PATH"
fi

# Install dependencies using Composer
composer install --no-interaction --working-dir="$LOCAL_PATH"

# Generate a new application key
php "$LOCAL_PATH"/artisan key:generate --force

# Optimize the application
php "$LOCAL_PATH"/artisan optimize

# Install FreeRADIUS

# Step 1: Install FreeRADIUS 3 and FreeRADIUS modules
apt-get update
apt-get install freeradius freeradius-mysql freeradius-utils -y

# Step 2: PHP installation is already handled

# Step 3: Install MySQL Server
ROOT_PASSWORD="$(openssl rand -base64 16)"
echo "mysql-server mysql-server/root_password password ${ROOT_PASSWORD}" | debconf-set-selections
echo "mysql-server mysql-server/root_password_again password ${ROOT_PASSWORD}" | debconf-set-selections
apt-get install mysql-server mysql-client -y

# Generate random MySQL username and password
MYSQL_USER="user_$(openssl rand -hex 3)"
MYSQL_PASSWORD="$(openssl rand -base64 12)"

# Create the 'radius' database and a new MySQL user with the necessary privileges
mysql -uroot -pYourRootPassword -e "CREATE DATABASE radius;"
mysql -uroot -pYourRootPassword -e "CREATE USER '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_PASSWORD}';"
mysql -uroot -pYourRootPassword -e "GRANT ALL PRIVILEGES ON radius.* TO '${MYSQL_USER}'@'localhost';"
mysql -uroot -pYourRootPassword -e "FLUSH PRIVILEGES;"

# Step 4: MySQL Root Password Configuration is handled during installation

# Step 5: Skipping the creation of the FreeRADIUS Database Schema

# Step 6: Set FreeRADIUS to Use SQL
cd /etc/freeradius/3.0/mods-enabled
ln -s ../mods-available/sql sql

sed -i 's/-sql/sql/g' /etc/freeradius/3.0/sites-available/default
sed -i 's/-sql/sql/g' /etc/freeradius/3.0/sites-available/inner-tunnel

# Step 7: Edit the FreeRADIUS SQL Module's Configuration
sed -i 's/driver = "rlm_sql_null"/driver = "rlm_sql_mysql"/' /etc/freeradius/3.0/mods-available/sql
sed -i 's/dialect = "sqlite"/dialect = "mysql"/' /etc/freeradius/3.0/mods-available/sql

sudo bash -c "cat >> /etc/freeradius/3.0/mods-available/sql << EOF
server = \"localhost\"
port = 3306
login = \"${MYSQL_USER}\"
password = \"${MYSQL_PASSWORD}\"
radius_db = \"radius\"
read_clients = yes
EOF"

# Step 8: Run FreeRADIUS
freeradius -X

# Supervisor Installation

# Step 1: Install Supervisor
sudo apt-get install -y supervisor

# Step 2: Configure Supervisor
sudo bash -c "cat > /etc/supervisor/conf.d/queue-worker.conf << EOL
[program:queue-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /var/www/html/artisan queue:work --tries=3
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=www-data
numprocs=5
redirect_stderr=true
stdout_logfile=/var/www/html/storage/logs/queue.log
stopwaitsecs=3600
EOL"

# Step 3: Start Supervisor
sudo systemctl start supervisor
sudo supervisorctl status
sudo supervisorctl reread
sudo supervisorctl start queue-worker:*

# Install OpenVPN
sudo apt-get update
sudo apt-get install -y openvpn

# Add an OpenVPN configuration file if needed, e.g.:
# sudo cp /path/to/your/openvpn/config.ovpn /etc/openvpn/

# Enable and start OpenVPN service
sudo systemctl enable openvpn
sudo systemctl start openvpn

# Set permissions for /etc/openvpn
sudo chmod -R 777 /etc/openvpn

# Update sudoers file to allow www-data user to restart and check the status of OpenVPN without a password
sudo bash -c "cat >> /etc/sudoers << EOL
www-data ALL=NOPASSWD: /bin/systemctl restart openvpn
www-data ALL=NOPASSWD: /bin/systemctl status openvpn
EOL"

# Display the database name, MySQL username, and password
echo "Database Name: radius"
echo "MySQL Username: ${MYSQL_USER}"
echo "MySQL Password: ${MYSQL_PASSWORD}"

# Display the message to copy the details
echo "Please copy these details. You will need them to continue to the next step."